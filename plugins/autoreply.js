const { cmd } = require('../command');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

// ‚úÖ Voice list ‡∂ë‡∂ö (‡∂î‡∂∂‡∂ß ‡∂∏‡∑ô‡∂∫ ‡∑É‡∂Ç‡∑É‡∑ä‡∂ö‡∂ª‡∂´‡∂∫ ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö)
const voiceList = [
    'https://github.com/mrdinesh595/Mssadu/raw/refs/heads/main/database/alive.mp3',
    'https://github.com/mrdinesh595/Mssadu/raw/refs/heads/main/database/menu.mp3'
];

// ‚úÖ Auto Reply Trigger Message (‡∂∏‡∑ô‡∂∫ ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±)
const triggerMessage = 'sts';

// Voice ‡∂ë‡∂ö download ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö function ‡∂ë‡∂ö
async function downloadVoice(url, outputPath) {
    const response = await axios({
        url,
        method: 'GET',
        responseType: 'stream'
    });

    const writer = fs.createWriteStream(outputPath);
    response.data.pipe(writer);

    return new Promise((resolve, reject) => {
        writer.on('finish', resolve);
        writer.on('error', reject);
    });
}

// Auto Reply Activate/Deactivate
let autoVoiceReplyEnabled = false;

// ‚úÖ Auto Reply Activate/Deactivate Command
cmd({
    pattern: 'autoreply',
    react: "üé§",
    desc: 'Enable or disable auto voice reply.',
    filename: __filename
}, async (conn, mek, m, { from, reply }) => {
    try {
        autoVoiceReplyEnabled = !autoVoiceReplyEnabled;

        if (autoVoiceReplyEnabled) {
            reply(`‚úÖ *Auto Voice Reply Activated*.\n\nTrigger Message: *${triggerMessage}*`);
        } else {
            reply('‚ùå *Auto Voice Reply Deactivated.*');
        }
    } catch (error) {
        console.error('‚ùå Error in Auto Voice Reply:', error);
        reply('‚ùå Auto Voice Reply Activation Failed.');
    }
});

// ‚úÖ Incoming Message Capture - Auto Reply
cmd({
    on: 'text',
    filename: __filename
}, async (conn, mek, m) => {
    if (!autoVoiceReplyEnabled) return;

    // Trigger message ‡∂ë‡∂ö‡∂ö‡∑ä‡∂Ø ‡∂ö‡∑í‡∂∫‡∑è ‡∂¥‡∑í‡∂ª‡∑í‡∂ö‡∑ä‡∑É‡∑ì‡∂∏
    if (m.text.toLowerCase() === triggerMessage.toLowerCase()) {
        try {
            const randomVoice = voiceList[Math.floor(Math.random() * voiceList.length)];
            const voicePath = path.join(__dirname, '../temp', `voice_${Date.now()}.mp3`);

            // Voice ‡∂ë‡∂ö download ‡∂ö‡∂ª send ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
            await downloadVoice(randomVoice, voicePath);
            await conn.sendMessage(m.chat, { audio: { url: voicePath }, mimetype: 'audio/mp4', ptt: true });

            // Temporary file ‡∂ë‡∂ö delete ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
            fs.unlinkSync(voicePath);
        } catch (error) {
            console.error('‚ùå Error in Sending Auto Voice:', error);
        }
    }
});
